task("watch", "Watch and recompile java files", function () {
  var Paths = Java.type("java.nio.file.Paths");
  var Files = Java.type("java.nio.file.Files");
  var FileSystems = Java.type("java.nio.file.FileSystems");
  var SimpleFileVisitor = Java.type("java.nio.file.SimpleFileVisitor");
  var FileVisitResult = Java.type("java.nio.file.FileVisitResult");
  var Events = Java.type("java.nio.file.StandardWatchEventKinds");

  var src = Paths.get(path + "/src");
  var watcher = FileSystems.getDefault().newWatchService();
  var Visitor = Java.extend(SimpleFileVisitor);
  Files.walkFileTree(src, new Visitor() {
    preVisitDirectory: function (dir) {
      dir.register(watcher, Events.ENTRY_CREATE, Events.ENTRY_DELETE, Events.ENTRY_MODIFY);
      return FileVisitResult.CONTINUE;
    }
  });

  print("watching ${src} for recompile...");

  while (true) {
    var watchKey = watcher.take();
    var events = watchKey.pollEvents();
    for each (var event in events) {
      var changedPath = event.context();
      if (String(changedPath).indexOf(".java") > -1) {
        run('compile');
      }
    }
    watchKey.reset();
  }
});

task("compile", "Compile all java files", function() {
  var src = "src";  // root dir of .java files
  var out = "out";  // root dir of .class files

  var found = $EXEC("find ${src} -name *.java");
  var paths = found.trim().split("\n");
  if (paths.length == 0) {
    print("no java files found");
    exit(0);
  }

  var join = java.lang.String.join(" ", paths);

  print("  - compiling ${paths.length} java files to dir: ${out}");

  $EXEC("mkdir -p ${out}");
  $EXEC("javac -d ${out} ${join}");

  if ($ERR) print("[ERROR] ${$ERR}");
});

task("run", "Run java application", function (options) {
  var name = "";
  if (options.length > 0) {
    name = options[0];
  }

  $ENV['PWD'] = "./out";
  print(`java com/winterbe/nake/java/Main ${options[0]}`);
  if ($ERR) {
    print("[ERROR] ${$ERR}");
  }
});
